# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-03-12 17:35
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AvailableTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allDay', models.BooleanField()),
                ('availableStartTime', models.TimeField()),
                ('availableEndTime', models.TimeField()),
                ('daysOfWeek', models.ManyToManyField(to='common.DayOfWeek')),
            ],
        ),
        migrations.CreateModel(
            name='Characteristic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('coding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Coding')),
            ],
        ),
        migrations.CreateModel(
            name='Eligibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('coding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Coding')),
            ],
        ),
        migrations.CreateModel(
            name='HealthcareService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.TextField()),
                ('serviceName', models.TextField()),
                ('comment', models.TextField(null=True)),
                ('extraDetails', models.TextField(null=True)),
                ('photo', models.URLField(null=True)),
                ('coverageArea', models.TextField()),
                ('eligibilityNote', models.TextField(null=True)),
                ('programName', models.TextField(null=True)),
                ('publicKey', models.TextField(null=True)),
                ('appointmentRequired', models.BooleanField(default=True)),
                ('availabilityExceptions', models.TextField(null=True)),
                ('availableTime', models.ManyToManyField(to='practicioners.AvailableTime')),
                ('characteristic', models.ManyToManyField(to='practicioners.Characteristic')),
                ('eligibility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='practicioners.Eligibility')),
                ('identifier', models.ManyToManyField(to='common.Identifier')),
            ],
            options={
                'ordering': ['serviceName'],
            },
        ),
        migrations.CreateModel(
            name='NotAvailable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='NotAvailablePeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Practicioner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('unknown', 'Unknown')], default='unknown', max_length=7)),
                ('birthDate', models.DateTimeField(null=True)),
                ('photo', models.URLField(null=True)),
                ('communication', models.CharField(default='ES-AR', max_length=400)),
                ('address', models.ManyToManyField(to='common.Address')),
                ('identifier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='common.Identifier')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.HumanName')),
            ],
        ),
        migrations.CreateModel(
            name='PracticionerQualification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=9)),
                ('identifier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='common.Identifier')),
                ('issuer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='PracticionerQualificationPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='PracticionerRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('healthCareService', models.ManyToManyField(to='practicioners.HealthcareService')),
                ('location', models.ManyToManyField(to='common.Location')),
                ('managingOrganization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='PracticionerRolePeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='ReferralMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('coding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Coding')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('coding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Coding')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('coding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Coding')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProvisioningCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('coding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Coding')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Speciality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('coding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Coding')),
            ],
        ),
        migrations.CreateModel(
            name='TypeService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('coding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Coding')),
            ],
        ),
        migrations.AddField(
            model_name='servicetype',
            name='speciality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='practicioners.Speciality'),
        ),
        migrations.AddField(
            model_name='servicetype',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='practicioners.TypeService'),
        ),
        migrations.AddField(
            model_name='practicionerrole',
            name='period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='practicioners.PracticionerRolePeriod'),
        ),
        migrations.AddField(
            model_name='practicionerrole',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='practicioners.Role'),
        ),
        migrations.AddField(
            model_name='practicionerrole',
            name='speciality',
            field=models.ManyToManyField(to='practicioners.Speciality'),
        ),
        migrations.AddField(
            model_name='practicionerqualification',
            name='period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='practicioners.PracticionerQualificationPeriod'),
        ),
        migrations.AddField(
            model_name='practicioner',
            name='practicionerRole',
            field=models.ManyToManyField(to='practicioners.PracticionerRole'),
        ),
        migrations.AddField(
            model_name='practicioner',
            name='qualification',
            field=models.ManyToManyField(to='practicioners.PracticionerQualification'),
        ),
        migrations.AddField(
            model_name='practicioner',
            name='telecom',
            field=models.ManyToManyField(to='common.ContactPoint'),
        ),
        migrations.AddField(
            model_name='notavailable',
            name='during',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='practicioners.NotAvailablePeriod'),
        ),
        migrations.AddField(
            model_name='healthcareservice',
            name='notAvailable',
            field=models.ManyToManyField(to='practicioners.NotAvailable'),
        ),
        migrations.AddField(
            model_name='healthcareservice',
            name='providedBy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.Organization'),
        ),
        migrations.AddField(
            model_name='healthcareservice',
            name='referralMethod',
            field=models.ManyToManyField(to='practicioners.ReferralMethod'),
        ),
        migrations.AddField(
            model_name='healthcareservice',
            name='serviceCategory',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='practicioners.ServiceCategory'),
        ),
        migrations.AddField(
            model_name='healthcareservice',
            name='serviceProvisioningCode',
            field=models.ManyToManyField(to='practicioners.ServiceProvisioningCode'),
        ),
        migrations.AddField(
            model_name='healthcareservice',
            name='serviceType',
            field=models.ManyToManyField(to='practicioners.ServiceType'),
        ),
        migrations.AddField(
            model_name='healthcareservice',
            name='telecom',
            field=models.ManyToManyField(to='common.ContactPoint'),
        ),
    ]
